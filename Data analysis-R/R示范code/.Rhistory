)
tibble(url= str_c(url, many_urls))
sample_n(2)#运行更快
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text)
)
library(ps)
tibble(url= str_c(url, many_urls))
sample_n(2)#运行更快
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text)
)
tibble(url= str_c(url, many_urls))
sample_n(2) %>% #运行更快
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href")
)
tibble(url= str_c(url, many_urls))
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href")
)
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href")
)
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href" )
) %>%
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href" )
) %>%
many_urls <- c("", str_c("/page", 2:10 ))
many_urls
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href" )
) %>%
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href" )
)
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page,html_nodes,".cim_kontener a"),
car = map(url_to_car,html_text),
url_to_car =map(html_attr,"href" )
)
table_form_page<-url_to_car %>%
na.omit() %>%
first() %>%
read_html() %>%
html_table(fill = TRUE) %>%
keep(~ ncol(.) == 2)##所有有两列的数据集筛选出来
#apply
cars
apply(cars,2,mean)
x<-1:10
x
lapply(x, function(x) x^2)
sapply(x, function(x) x^2)
map(x,~ .^2)#same with tidy method
map_dbl(x,~.^2)
#map
table_form_page %>%
map(~set_names(.,"x","y"))
table_form_page %>%
map(~ set_names(.,"x","y")) %>%
bind_rows()#merge the tables
get_data <- function(url_to_car) {
url_to_car %>%
read_html() %>%
html_table(fill = TRUE) %>%
keep(~ ncol(.) == 2) %>%
map(~ set_names(., "x", "y")) %>%
bind_rows()
}
tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
)
tibble(url= str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car =map(page, html_nodes ,".cim_kontener a"),
car = map(url_to_car, html_text) ,
url_to_car =map(html_attr,"href" )
)
select(car, url_to_car %>%
unnest(cols=c(car, url_to_car)) %>%
select(car, url_to_car) %>%
unnest(cols=c(car, url_to_car)) %>%
select(car, url_to_car) %>%
unnest(cols=c(car, url_to_car)) %>%
filter(!is.na(url_to_car))
tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols=c(car, url_to_car)) %>%
filter(!is.na(url_to_car))
tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols = c(car, url_to_car)) %>%
filter(!is.na(url_to_car))
tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols = c(car, url_to_car))
tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols = c(car, url_to_car)) %>% #把p那些没有数据的演示出来
filter(!is.na(url_to_car))  #把没有数据的全部去掉
cars_df
cars_df<- tibble(url = str_c(url, many_urls)) %>%
cars_df
cars_df <- tibble(url = str_c(url, many_urls)) %>%
cars_df
cars_df <- tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols = c(car, url_to_car)) %>% #把p那些没有数据的演示出来
filter(!is.na(url_to_car))  #把没有数据的全部去掉
cars_df
cars_df %>%
sample_n(2) %>%
mutate(
data = map(url_to_car, get_data)
)
cars_df %>%
sample_n(2) %>%
mutate(
data = map(url_to_car, get_data)
) %>%
pull(data) %>%
first()
unnest(data)
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
pull(data) %>%
first()
unnest(data)
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
pull(data) %>%
first() %>%
unnest(data)
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data)
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)
cars_df <- tibble(url = str_c(url, many_urls)) %>%
sample_n(2) %>%
mutate(
page = map(url, read_html),
url_to_car = map(page, html_nodes, ".cim-kontener a"),
car = map(url_to_car, html_text),
url_to_car = map(url_to_car, html_attr, "href")
) %>%
select(car, url_to_car) %>%
unnest(cols = c(car, url_to_car)) %>% #把p那些没有数据的演示出来
filter(!is.na(url_to_car))  #把没有数据的全部去掉
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
pull(data) %>%
first() %>%
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data)
install.packages("janitor")
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_form = x, value_form= y) %>%
janitor::clean_names()
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_form = x, value_form = y) %>%
janitor::clean_names()
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_from = x, value_from = y) %>%
janitor::clean_names()
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_from = x, values_from = y) %>%
janitor::clean_names()
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_from = x, values_from = y) %>%
janitor::clean_names()
cars_df %>%
sample_n(2) %>% #列出其中2行
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%  #展开数据
select(-url_to_car)%>%
pivot_wider(names_from = x, values_from = y) %>%
janitor::clean_names()
safely_read_html <- possibly(read_html, NA, quiet = FALSE)
for(i in 1:3){
if (is.na(page)){
Sys.sleep(2)
meesage("i have to be patient")
page <-safely_read_html(url)
}
}
sleepy_read_html <- function(url) {
page <- safely_read_html(url)
for (i in 1:3) {
if (is.na(page)) {
Sys.sleep(2)
message("I have to be patient! :)")
page <- safely_read_html(url)
}
}
page
}
get_data <- function(url_to_car) {
page <- url_to_car %>%
sleepy_read_html()
if (!is.na(page)) {
page %>%
html_table(fill = TRUE) %>%
keep(~ ncol(.) == 2) %>%
map(~ set_names(., "x", "y")) %>%
bind_rows()
} else {
tibble(x = as.character(NA), y = as.character(NA))
}
}
cars_data_df <- cars_df %>%
mutate(
data = map(url_to_car, get_data)
) %>%
unnest(data) %>%
pivot_wider(names_from = x, values_from = y) %>%
janitor::clean_names()
library(readr)
employee <- read_delim("~/employee.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(employee)
employee
t.test(employee$educ)
t.test(employee$educ,alternative = "less", mu=15)
t.test(employee$salary,alternative = "greater" ,mu=300000)
t.test(employee$salary,alternative = "greater" ,mu=30000)
c(intlow,intup)
qt(0.975, df=30-1)
n=length(employee$minority)
alpha=0.02 #significance value
z = qnorm(1-alpha/2)
tableminority=table(employee$minority)
Propofgood=tableminority['good']/n
tableminority=table(employee$minority)
Propofminority=tableminority['good']/n
Propofminority + c(-1,1)*z*sqrt(Propofgood*(1-Propofgood)/n)
Propofminority=tableminority['Yes']/n
Propofminority + c(-1,1)*z*sqrt(Propofgood*(1-Propofgood)/n)
minority
Propofminority=tableminority['Yes']/n
Propofminority + c(-1,1)*z*sqrt(Propofminority*(1-Propofminority)/n)
pw$dummy_female <- ifelse(pw$gender == "female", 1, 0)
TableGDP=table(pw$dummy_female)
TableGDP
var.test(x = pw$gender[pw$dummy_female == 1] ,
y = pw$gender[pw$dummy_female == 0])
emploee$dummy_female <- ifelse(emploee$gender == "female", 1, 0)
TableGDP=table(emploee$dummy_female)
TableGDP
var.test(x = emploee$gender[emploee$dummy_female == 1] ,
y = emploee$gender[emploee$dummy_female == 0])
employee$dummy_female <- ifelse(employee$gender == "female", 1, 0)
TableGDP=table(employee$dummy_female)
TableGDP
var.test(x = employee$gender[employee$dummy_female == 1] ,
y = employee$gender[employee$dummy_female == 0])
prop.test(Tablefemale, alternative='greater', p=.5, conf.level=.95,
correct=FALSE)
Tablefemale=table(employee$dummy_female)
prop.test(Tablefemale, alternative='greater', p=.5, conf.level=.95,
correct=FALSE)
Tablefemale=table(employee$dummy_female)
employee$dummy_female <- ifelse(employee$gender == "female", 1, 0)
Tablefemale=table(employee$dummy_female)
prop.test(Tablefemale, alternative='greater', p=.48, conf.level=.95,
correct=FALSE)
Tablefemale
employee$dummy_female <- ifelse(employee$gender == "Female", 1, 0)
Tablefemale=table(employee$dummy_female)
prop.test(Tablefemale, alternative='greater', p=.48, conf.level=.95,
correct=FALSE)
t.test(employee$salary,alternative = "greater" ,mu=30000)
qt(0.95,472)
minority_prop_estimate <- Propofminority + c(-1,1)*z*sqrt(Propofminority*(1-Propofminority)/n)
minority_prop_estimate
ev_salary<- mean(employee$salary)+c(-1,1)*qt(0.95,472)*sd(employee$salary)/sqrt(473)
ev_salary
ev_prevexp<- mean(employee$prevexp)+c(-1,1)*qt(0.95,472)*sd(employee$prevexp)/sqrt(473)
ev_prevexp
t.test ( employee$educ ,
alternative = "greater" ,
mu = 13 )
mean_man_salary <- filter(employee$gender=="Man")
employee %>%
group_by(gender)
library(purrr)
employee %>%
group_by(gender)
library(dplyr)
employee %>%
group_by(gender)
employee %>%
group_by(gender) %>%
mutate(man_salary=ifesle(gender=="Male",1,0))
library(tidyverse)
employee %>%
group_by(gender) %>%
mutate(man_salary=ifesle(gender=="Man",1,0))
employee %>%
group_by(gender) %>%
mutate(man_salary = ifesle(gender=="Man",1,0))
employee %>%
select(gender= "Man")
employee %>%
select(gender= "man")
employee %>%
select(gender= "Male")
employee %>%
select(gender = "Male")
employee %>%
group_by(gender) %>%
mutate(man_salary = ifesle (gender=="Male",1,0))
employee %>%
group_by(gender) %>%
mutate(man_salary = ifesle(gender=="Male",1,0))
employee %>%
filter(str_detect(gender , "Male")) %>%
pull(salary)
man_salary <-employee %>%
filter(str_detect(gender , "Male")) %>%
pull(salary)
woman_salary <-employee %>%
filter(str_detect(gender , "Female")) %>%
pull(salary)
mean(man_salary)
mean(woman_salary)
man_salary/woman_salary
mean(man_salary)/mean(woman_salary)
salary_ratio <- mean(man_salary)/mean(woman_salary)
var.test(mean(man_salary),mean(woman_salary))
t.test (man_salary,woman_salary )
library(gmodels)
CrossTable ( employee$gender , employee$jobcat ,
chisq = T , sresid = T ,
fisher = T ,
format = "SPSS" )
library(janitor)
tabyl(employee, gender , salary)
tabyl(employee, gender , salary)
hist(Practice$Price_z)
cov ( Practice [ , num ] )
cor ( Practice [ , num ] )
library(readxl)
Practice <- read_excel("~/Practice.xlsx")
View(Practice)
Practice
Practice$dummy <- ifelse(Practice$Condition == 'excellent', 1, 0)
#dummy using 1 or 0 to tell the condition is excellent or not.
#if it is excellent , it would be 1, if not then 0 .
Tableexcellent=table(Practice$dummy)
Tableexcellent
prop.test(Tableexcellent, alternative='greater', p=.5, conf.level=.95,
correct=FALSE)
t.test ( Practice$Price ~ Practice$dummy , data = Practice ,
var.equal = F, alternative = "less" )
t.test ( x = Practice$Price[Practice$dummy == 1] ,
y = Practice$Price[Practice$dummy == 0] ,
var.equal = F )
gg<-ggplot(Usedcars, aes(x=Brand, y=Price))+
geom_point(aes(col=,size=))+
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Brand Vs Price",
y="Price",
x="Brand",
title="Scatterplot",
caption = "Source: Usedcars")
